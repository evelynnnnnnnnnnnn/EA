this.BX=this.BX||{};this.BX.UI=this.BX.UI||{};(function(e,t,n,r){"use strict";const o=Symbol("name");const s=Symbol("group");const i=Symbol("validate");const a=Symbol("before");const l=Symbol("convert");const c=Symbol("forChild");const h=Symbol("after");const u=()=>true;const d=({node:e})=>e;const f=({element:e})=>e;class m{constructor(e={}){this[o]="unknown";this[s]=null;this[a]=null;this[l]=null;this[c]=null;this[h]=null;if(n.Type.isArray(e.name)){this[s]=[...e.name]}else{this.setName(e.name)}this.setValidate(e.validate);this.setBefore(e.before);this.setConvert(e.convert);this.setForChild(e.forChild);this.setAfter(e.after)}setName(e){if(!n.Type.isStringFilled(e)){throw new TypeError("Name is not a string")}this[o]=e}getName(){return this[o]}setValidate(e){if(n.Type.isFunction(e)){this[i]=e}else{this[i]=u}}validate(e){const t=this[i](e);if(n.Type.isBoolean(t)){return t}throw new TypeError(`Validate callback for "${this.getName()}" returned not boolean`)}setBefore(e){if(n.Type.isFunction(e)){this[a]=e}else{this[a]=d}}runBefore(e){const t=this[a](e);if(t instanceof r.BBCodeNode||n.Type.isNull(t)){return t}throw new TypeError(`Before callback for "${this.getName()}" returned not null or BBCodeNode`)}setConvert(e){if(!n.Type.isFunction(e)){throw new TypeError("Convert is not a function")}this[l]=e}runConvert(e){const t=this[l](e);if(n.Type.isDomNode(t)||n.Type.isNull(t)){return t}throw new TypeError(`Convert callback for "${this.getName()}" returned not HTMLElement, Text or null`)}setForChild(e){if(n.Type.isFunction(e)){this[c]=e}else{this[c]=f}}runForChild(e){const t=this[c](e);if(n.Type.isDomNode(t)||n.Type.isNull(t)){return t}throw new TypeError(`ForChild callback for "${this.getName()}" returned not HTMLElement, Text or null`)}setAfter(e){if(n.Type.isFunction(e)){this[h]=e}else{this[h]=f}}runAfter(e){const t=this[h](e);if(n.Type.isDomNode(t)||n.Type.isNull(t)){return t}throw new TypeError(`After callback for "${this.getName()}" returned not HTMLElement, Text or null`)}}const p=Symbol("formatters");const T=Symbol("onUnknown");class y{constructor(e={}){this[p]=new Map;this[T]=null;this.setNodeFormatters(e.formatters);if(n.Type.isNil(e.onUnknown)){this.setOnUnknown(this.getDefaultUnknownNodeCallback())}else{this.setOnUnknown(e.onUnknown)}}static prepareSourceNode(e){if(e instanceof r.BBCodeNode){return e}if(n.Type.isString(e)){return(new t.BBCodeParser).parse(e)}return null}setNodeFormatters(e){if(n.Type.isArrayFilled(e)){e.forEach((e=>{this.setNodeFormatter(e)}))}}setNodeFormatter(e){if(e instanceof m){this[p].set(e.getName(),e)}else{throw new TypeError("formatter is not a NodeFormatter instance.")}}getDefaultUnknownNodeCallback(){return()=>new m({name:"unknown",before({node:e}){const t=e.getScheme();if(e.isVoid()){return t.createFragment({children:[t.createText(e.getOpeningTag())]})}return t.createFragment({children:[t.createText(e.getOpeningTag()),...e.getChildren(),t.createText(e.getClosingTag())]})},convert(){return document.createDocumentFragment()}})}setOnUnknown(e){if(n.Type.isFunction(e)){this[T]=e}else{throw new TypeError("OnUnknown callback is not a function.")}}runOnUnknown(e){const t=this[T](e);if(t instanceof m||n.Type.isNull(t)){return t}throw new TypeError("OnUnknown callback returned not NodeFormatter instance or null.")}getNodeFormatter(e){const t=this[p].get(e.getName());if(t instanceof m){return t}return this.runOnUnknown({node:e,formatter:this})}format(e){if(!n.Type.isPlainObject(e)){throw new TypeError("options is not a object")}const{source:t,data:r={}}=e;if(!n.Type.isUndefined(r)&&!n.Type.isPlainObject(r)){throw new TypeError("options.data is not a object")}const o=y.prepareSourceNode(t);if(n.Type.isNull(o)){throw new TypeError("options.source is not a BBCodeNode or string")}const s=this.getNodeFormatter(o);const i=s.validate({node:o,formatter:this,data:r});if(!i){return null}const a=s.runBefore({node:o,formatter:this,data:r});if(n.Type.isNull(a)){return null}const l=s.runConvert({node:a,formatter:this,data:r});if(n.Type.isNull(l)){return null}a.getChildren().forEach((e=>{const t=this.format({source:e,data:r});if(n.Type.isDomNode(t)){const o=s.runForChild({node:e,element:t,formatter:this,data:r});if(n.Type.isDomNode(o)){l.appendChild(o)}}}));return s.runAfter({node:a,element:l,formatter:this,data:r})}}e.Formatter=y;e.NodeFormatter=m})(this.BX.UI.BBCode=this.BX.UI.BBCode||{},BX.UI.BBCode,BX,BX.UI.BBCode);
//# sourceMappingURL=formatter.bundle.map.js